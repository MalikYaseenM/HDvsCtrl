import os
import pandas
import glob

include: '../common_workflow.snake'
workdir: '../../samples'



#Salmon_counts is a list that contains the path to all of the quant.sf files(sample/quant.sf)
salmon_counts = glob.glob('*/quant.sf')

salmonpath='../reference/gencode.v25.pc_lncRNA_transcripts.salmon_quasi_index'

pathtogtf='../reference/gencode.v25.annotation.gtf'

count=expand('{sample}__salmon__counts', sample=dataset_ids)

salmon_matrix='all_salmon_quant.tsv'

annotation='/projectnb/bubhub/bubhub-reference/genome/human/GENCODE/v25/gencode.v25.lncRNA_transcripts.fa'

final_map='gencode.v25.lncRNA_transcripts.tsv'



rule all:
  input:
    count,
    salmon_matrix,
    final_map

rule salmonquant:
  input:
    read1="{sample}__R1.fastq.gz",
    read2="{sample}__R2.fastq.gz",
    gtf= pathtogtf,
    index= salmonpath
  output:
    file='{sample}__salmon__counts'
  threads: 8
  shell:
    "salmon quant --index {input.index} -g {input.gtf} "
    "-l A -1 {input.read1} -2 {input.read2} --output {output.file} "
    "-p {threads} "

rule salmon_concat:
  input:
    quant= salmon_counts
  output:
    matrix= salmon_matrix
  run:
    mat = None
    for fn in input.quant :
    #if path='/home/user/student' printing (os.path.basename(path)) gives you 'student'
    #printing (os.path.basename(os.path.dirname(path)) 'user'

      sample_name = os.path.basename(os.path.dirname(fn))

    # file name is <sample>_mrnaseq_salmon_counts this removes that leaving you with just the samplename)

      sample_name = sample_name.replace('_mRNASeq__salmon__counts', '')

      df = pandas.read_csv(fn,sep='\t',index_col=0)


#this is renaming the columns using a list comprehension. columns = {name:changedname}
#In this case changing column name to <samplename>_<previous column name>

      df.rename(columns={_:'{}_{}'.format(sample_name,_) for _ in df.columns[1:]}, inplace=True)

      if mat is None :
        mat = df
        else :
          del df['Length']
            mat = mat.merge(df,left_index=True,right_index=True)
#writing final output to a tab delimited file
    mat.to_csv(output[0],sep='\t')


rule maps:
  input:
    hum_annot=annotation
  output:
    map=final_map
  run:
    with open(output.map,'w') as o :
      with open(input.hum_annot) as f :
        for rec in f :
          if rec.startswith('>') :
            enst, ensg, rest = rec[1:].split('|',2)
            o.write('{}\t\n'.format(enst))

# rule tximport:
#     input:
#       salmon_quat = salmon_counts
#       map = final_map
#     output:
#         outfile= txout
#     threads:
#     shell:
