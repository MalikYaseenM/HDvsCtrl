# Snakefile

# snakemake --nolock -np --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 50
# snakemake --nolock --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 50
import os
import pandas
import glob

include: '../common_workflow.snake'




#REFERENCES

tru_adapter = os.path.abspath('../reference/TruSeq3-PE.fa')
indexdir= os.path.abspath('../reference/GENCODE_v25_star_index')
pathtogtf=os.path.abspath('../reference/gencode.v25.annotation.gtf')
salmonpath=os.path.abspath('../reference/gencode.v25.transcripts.salmon_quasi_index')

workdir: '../../samples'
fastqc_files = expand("{sample}__{read}__{trim}_fastqc.zip",
                    sample=dataset_ids, read=["R1", "R2"], trim=["trimU", "trimP"])

count = expand('{sample}__salmon__counts', sample=dataset_ids)




rule all:
 input:
   count,
   fastqc_files

rule trimmomatic:
  input:
    read1 = "{sample}__R1.fastq.gz",
    read2 = "{sample}__R2.fastq.gz",
    adapter_fa = tru_adapter
  output:
    read1p = "{sample}__R1__trimP.fastq.gz",
    read1u = "{sample}__R1__trimU.fastq.gz",
    read2p = "{sample}__R2__trimP.fastq.gz",
    read2u = "{sample}__R2__trimU.fastq.gz",
    trimlog = "{sample}__trimerror.log"
  log:
     "{sample}__trimerror.log"
  shell:
    "trimmomatic PE -phred33 "
    "{input.read1} {input.read2} "
    "{output.read1p} {output.read1u} {output.read2p} {output.read2u} "
    "ILLUMINACLIP:{input.adapter_fa}:2:30:10 LEADING:3 TRAILING:3 "
    "SLIDINGWINDOW:4:15 MINLEN:36 2> {log} "

rule fastqc:
    input:
        fastq = "{sample}__{read}__{trim}.fastq.gz"
    output:
        zip1 = "{sample}__{read}__{trim}_fastqc.zip",
        html = "{sample}__{read}__{trim}_fastqc.html"
    params:
        zip1 = lambda wildcards, output: output.zip1.replace("_fastqc.zip", "__fastqc.zip"),
        html = lambda wildcards, output: output.html.replace("_fastqc.html", "__fastqc.html")
    threads: 4        
    shell:
        """
        fastqc -t {threads} {input.fastq}
        mv {output.zip1} {params.zip1} \\
        && mv {output.html} {params.html} 
        """        
rule salmonquant:
    input:
      read1="{sample}__R1__trimP.fastq.gz",
      read2="{sample}__R2__trimP.fastq.gz",
      gtf= pathtogtf,
      index= salmonpath
    output:
      file='{sample}__salmon__counts'
    threads: 8
    shell:
      "salmon quant --index {input.index} -g {input.gtf} "
      "-l A -1 {input.read1} -2 {input.read2} --output {output.file} "
      "-p {threads} "
        

rule STAR:
    input:
      index= indexdir,
      read1="{sample}__R1__trimP.fastq.gz",
      read2="{sample}__R2__trimP.fastq.gz"
    output:
      unsorted_bam='{sample}__trimP__STAR.Aligned.out.bam',
      finallog='{sample}__trimP__STAR.Log.final.out'
    params:
      prefix='{sample}__trimP__STAR.'
    threads: 8
    shell:
      "STAR --runThreadN {threads} "
      "--runMode alignReads "
      "--genomeDir {input.index} "
      "--readFilesIn {input.read1} {input.read2} "
      "--readFilesCommand zcat --outFileNamePrefix {params.prefix} "
      "--outSAMtype BAM Unsorted "

rule multiqc:
    input:
        fqcR1 = "{sample}__{read}__{trim}__fastqc.zip",
        fqcR2 = "{sample}__{read}__{trim}__fastqc.html"
        trim="{sample}__trimerror.log",
        STAR="{sample}__trimP__STAR.Log.final.out"
    output:
        report="{sample}__multiqc_report.html"
    params:
        prefix="{sample}__multiqc_report."
    shell:
        "export LC_ALL=en_US.utf-8 export LANG=$LC_ALL && "
        "multiqc -n {params.prefix} "
        "{input.fqcR1} {input.fqcR2} {input.trim} {input.STAR} "

