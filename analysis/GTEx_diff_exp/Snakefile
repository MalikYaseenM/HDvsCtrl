# snakemake --nolock -np --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 50
#REFERENCE
gtex_pheno = os.path.abspath(
    "../reference/phs000424.v7.pht002742.v7.p2.c1.GTEx_Subject_Phenotypes.GRU.txt")
GTEX_deseq_r = os.path.abspath("../../analysis/GTEx_diff_exp/GTEX_deseq2_filter.R")

workdir: "../../samples/GTEx/"

GTEX_info = "GTEx_info.tsv"
# Output files
filter_rows = "GTEx_salmon_filter.csv"

#Firth
GTEX_norm = "GTEx_salmon_norm.csv"
#GTEX_design_info = "GTEx_design_sex_age.tsv"

#DESEq2
GTEX_deseq_design = "GTEx_deseq_design.csv"
GTEX_deseq_out = "GTEx_filter_deseq2_results.csv"

GTEX_firth = "GTEx_salmon_firth_sex_age.tsv"
#GTEX_firth = "GTEx_firth_without_HD.tsv"



rule all:
  input:
    filter_rows,
#    GTEX_norm,
#    GTEX_design_info,
#    GTEX_firth,
    GTEX_deseq_design,
    GTEX_deseq_out,



#================================Pre-Processing===========================================#
# filter rows with means less than 5
rule create_filtered_rows:
  input:
      quant = "GTEx_salmon_quant.tsv"
  output:
      filter_fn = filter_rows
  run:
      import pandas as pd
      fn = input.quant
      ALL_GTEX = pd.read_csv(fn, sep="\t", index_col=['gene_id'])
      # get ba9 and cau samples and put them in a list
      ba9 = ALL_GTEX.filter(regex="^GTEX-.*BA9.*").columns.tolist()
      cau = ALL_GTEX.filter(regex="^GTEX-.*CAU.*").columns.tolist()
      # Drop the Unnamed column which is just an index
      if "Unnamed: 0" in ALL_GTEX.columns:
          ALL_GTEX = ALL_GTEX.drop("Unnamed: 0", axis=1)
      else:
          # Take the meas of ba9 and cau samples and create new columns
          ALL_GTEX["avg_ba9"] = ALL_GTEX[ba9].mean(axis=1)
          ALL_GTEX["avg_cau"] = ALL_GTEX[cau].mean(axis=1)
          
          ALL_GTEX = ALL_GTEX[(ALL_GTEX.avg_ba9 > 5) | (ALL_GTEX.avg_cau > 5)]          
          ALL_GTEX = ALL_GTEX.drop("avg_ba9", axis=1)
          ALL_GTEX = ALL_GTEX.drop("avg_cau", axis=1)
          
          GTEX_DF = ALL_GTEX.filter(regex="GTEX-.*")

          GTEX_DF.to_csv(output.filter_fn, index=True)
    
rule create_deseq_design:
    input:
        gtex = "GTEx_info.tsv"
    output:
        design = GTEX_deseq_design
    run:
        import os, pandas as pd        
        info_file = pd.read_csv(input.gtex, sep='\t', usecols=['identifier', 'brain_region'])

        # We just need the sample names
        subset_info = info_file[info_file['identifier'].str.endswith('_R1')]
        subset_info['identifier'] = [_.rsplit('_', 1)[0] for _ in subset_info['identifier'].tolist()]
        subset_info.to_csv(output.design, sep=',', index=False)

# Run DESeq2 on the gtex samples
rule create_GTEX_filter_deseq:
  input:
      gtex = GTEX_deseq_r,
      filtered = filter_rows
      
  output: GTEX_deseq_out
  shell:
      "Rscript {input.gtex}"
