# Snakefile

# Usage
## Dry run to check if snakefile works
# snakemake --nolock -np --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 50
## Actual run
# snakemake --nolock --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 10

design_info = "all_info_design.csv"
filter_rows = "all_salmon_filter.csv"
norm = "all_salmon_norm.csv"
firth = "all_salmon_firth_t.csv"
tab_delim = "all_salmon_firth.csv"
sig = "all_salmon_firth_sig_counts.csv"

rule all:
  input:
    design_info,
    filter_rows,
    norm,
    firth,
    tab_delim,
    sig

# Outputs ordered sample info with subject type and age
rule design_info:
  input:"design_all.py"
  output:"all_info_design.csv"
  shell:
    "python {input}"

# filter rows with means less than 5 (deletes if both control means OR hd means <5)
rule filter_rows:
  input:"filter_all.py"
  output:"all_salmon_filter.csv"
  shell:
    "python {input}"

# Normalize counts
rule norm:
  input:"all_salmon_filter.csv"
  output:"all_salmon_norm.csv"
  shell:
    """detk-norm deseq2 {input} -o {output}"""

# DE Firth
rule firth:
  input:
    counts = "all_salmon_norm.csv",
    info= "all_info_design.csv"
  params:
    design="Subject_type[Control] ~ Subject_death + counts"
  output:"all_salmon_firth_t.csv"
  shell:
    """detk-de firth "{params.design}" {input.counts} {input.info} -o {output}"""

# Separates firth file with tabs
rule tab_delim:
  input:
    py = "tab_delim.py",
    firth = "all_salmon_firth_t.csv"
  output: "all_salmon_firth.csv"
  shell:
    """python {input.py} {input.firth}"""

# Returns significant counts and genes 
rule sig:
  input:
    py = "significant_firth.py",
    firth = "all_salmon_firth.csv",
    mart = "mart_export.txt"
  output: "all_salmon_firth_sig_counts.csv"
  shell:
    """./{input.py} {input.firth} {input.mart}"""
