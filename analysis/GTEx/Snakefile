#snakemake --nolock -np --cluster "qsub -P mlhd -cwd -pe omp {threads}" --jobs 50
#expand("sorted_reads/{sample}.{replicate}.bam", sample=SAMPLES, replicate=[0, 1])
import os, pandas, glob

df = pandas.read_csv(
    os.path.abspath('../../samples/GTEx/GTEx_info.tsv'),
    sep='\t', usecols=['identifier'])

# Sample names with _R1 _R2
samples = df['identifier'].tolist()

# Combined names for salmon which takes both pairs and produces 1
names = []
for sample_id in samples:
    split = sample_id.split("_")
    ident = split[0]
    brain = split[1]
    mrnaseq = split[2]
    names.append(ident + "_" + brain + "_" + mrnaseq)


#REFERENCES
truseq = os.path.abspath("../reference/TruSeq3-PE.fa")
indexdir = os.path.abspath("../reference/GENCODE_v25_star_index")
salmonpath = os.path.abspath(
    "../reference/gencode.v25.transcripts.salmon_quasi_index/")
pathtogtf = os.path.abspath(
    "../reference/gencode.v25.annotation.gtf")
hd_counts = glob.glob(os.path.abspath("../../samples/*/quant.genes.sf"))


workdir: "../../samples/GTEx/"

STAR = expand("{name}__trimP__STAR.Aligned.sortedByCoord.out.bam",
              name = names)

fastqc_files = expand("{name}_{read}__{trim}_fastqc.html",
                    name=names, read=["R1", "R2"], trim=["trimU", "trimP"])



rename_fastqc = expand("{name}_{read}__{trim}__fastqc.zip",
                       name=names, read=["R1", "R2"], trim=["trimU", "trimP"])

trim_error = expand("{name}__trimerror.log", name=names)

salmon_counts = expand("{name}__salmon__counts", name= names)
salmon_log = expand("{name}__salmon__counts/libParams/flenDist.txt",
                   name= names)
quant_sf = glob.glob("*/quant.genes.sf")

#total_counts = quant_sf + hd_counts

STAR_Log = expand("{name}__trimP__STAR.Log.final.out", name=names)

salmon_concat = "GTEx_salmon_quant.tsv"

ruleorder:  trimmomatic > fastqc > renamefastqc > salmon > concat_salmon > multiqc


rule all:
    input:
        # fastqc_files,
        # rename_fastqc,
        # trim_error,
        salmon_counts,
        salmon_concat,
        # STAR,
        #"multiqc_report.html"

rule trimmomatic:
    input:
        read1="{name}_R1.fastq.gz",
        read2="{name}_R2.fastq.gz",
        adapter = truseq
    output:
        read1p = "{name}__R1__trimP.fastq.gz",
        read1u = "{name}__R1__trimU.fastq.gz",
        read2p = "{name}__R2__trimP.fastq.gz",
        read2u = "{name}__R2__trimU.fastq.gz",
        trimlog = "{name}__trimerror.log"
    log:
        "{name}__trimerror.log"
    shell:
        "trimmomatic PE -phred33 "
        "{input.read1} {input.read2} "
        "{output.read1p} {output.read1u} {output.read2p} {output.read2u} "
        "ILLUMINACLIP:{input.adapter}:2:30:10 LEADING:3 TRAILING:3 "
        "SLIDINGWINDOW:4:15 MINLEN:36 2> {log} "

rule fastqc:
    input:
        fastq= "{name}__{read}__{trim}.fastq.gz",
    output:
        zip1 = "{name}_{read}__{trim}_fastqc.zip",
        html = "{name}_{read}__{trim}_fastqc.html",
    threads:8
    shell:
        "fastqc -t {threads} {input.fastq}"

rule renamefastqc:
    input:
        zip1 = "{name}_{read}__{trim}_fastqc.zip",
        html = "{name}_{read}__{trim}_fastqc.html",
    output:
        zip1 = "{name}_{read}__{trim}__fastqc.zip",
        html = "{name}_{read}__{trim}__fastqc.html",
    shell:
        "mv {input.zip1} {output.zip1} && "
        "mv {input.html} {output.html}"


rule salmon:
    input:
        READ1="{name}__R1__trimP.fastq.gz",
        READ2="{name}__R2__trimP.fastq.gz",
        gtf=pathtogtf,
        index= salmonpath
    output:
        salmon_out="{name}__salmon__counts"
    threads: 8
    shell:
        "salmon quant --index {input.index} -g {input.gtf} "
        "-l A -1 {input.READ1} -2 {input.READ2} --output {output.salmon_out} "
        "-p {threads} "

rule concat_salmon:
    input:
        quant = quant_sf
    output:
        matrix= "GTEx_salmon_quant.tsv"
    run:
        mat = None
        for fn in input.quant:
            if "GTEX" in os.path.dirname(fn):
                sample_name = os.path.dirname(fn).replace(
                    "__salmon__counts", "")
            else:
                sample_name = os.path.basename(os.path.dirname(fn)).replace(
                    "__salmon__counts", "")
            col_names = ["gene_id", "Length", "EffectiveLength", "TPM", "{}".
                         format(sample_name)]
            df = pandas.read_csv(fn, sep="\t", skiprows=1, names=col_names)

            if mat is None:
                df = df.drop(["Length", "EffectiveLength", "TPM"], axis=1)
                mat = df
            else:
                mat = pandas.concat([mat, df.iloc[:, 4:]], axis=1)
            mat.to_csv(output[0], sep="\t", index=False)

rule STAR:
    input:
        index= indexdir,
        read1="{name}__R1__trimP.fastq.gz",
        read2="{name}__R2__trimP.fastq.gz"
    output:
        sorted_bam="{name}__trimP__STAR.Aligned.sortedByCoord.out.bam",
        finallog="{name}__trimP__STAR.Log.final.out"
    params:
        prefix="{name}__trimP__STAR."
    threads:8
    shell:
        "STAR --runThreadN {threads} "
        "--runMode alignReads "
        "--genomeDir {input.index} "
        "--readFilesIn {input.read1} {input.read2} "
        "--readFilesCommand zcat --outFileNamePrefix {params.prefix} "
        "--outSAMtype BAM SortedByCoordinate "
        "--limitBAMsortRAM 57409410454"

rule multiqc:
    input:
        fqc=rename_fastqc,
        trim=trim_error,
        salmon=salmon_counts,
        STAR_Out= STAR_Log
    output:
        report="multiqc_report.html"
    params:
        prefix="multiqc_report."
    shell:
        "export LC_ALL=en_US.utf-8 export LANG=$LC_ALL && "

        "multiqc {input.fqc} {input.trim} {input.salmon} {input.STAR_Out}"
